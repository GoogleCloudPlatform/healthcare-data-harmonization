/*
 * Copyright 2021 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.verticals.foundations.dataharmonization.lsp;

import com.google.cloud.verticals.foundations.dataharmonization.Transpiler;
import com.google.cloud.verticals.foundations.dataharmonization.debug.proto.Debug.FileInfo;
import com.google.cloud.verticals.foundations.dataharmonization.error.TranspilationException;
import com.google.cloud.verticals.foundations.dataharmonization.error.TranspilationIssue;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.eclipse.lsp4j.Diagnostic;
import org.eclipse.lsp4j.DiagnosticSeverity;

/**
 * Utility function which contains a helper function to generate diagnostic information using a
 * {@link Transpiler} object.
 */
public class TranspileUtil {

  private static final Logger logger = Logger.getLogger(TranspileUtil.class.getName());
  public static final String TRANSPILER_SERVICE_DIAGNOSTICS = "Transpiler Service";
  private final DiagnosticMessageCollector diagnosticMessageCollector;

  public TranspileUtil(DiagnosticMessageCollector diagnosticMessageCollector) {
    this.diagnosticMessageCollector = diagnosticMessageCollector;
  }

  /**
   * Takes in a String of wstl text, document URI and a Map of document to Set of Diagnostics, and
   * attempts to Transpile that text. Any {@link TranspilationIssue}s which are generated are added
   * to the diagnostics set for that document.
   *
   * @param documentText the input wstl string
   * @param documentURI URI for the document, used by the transpiler when generating an output
   *     message.
   * @param transpiler {@link Transpiler} instance to run transpilation with.
   */
  protected void generateDiagnosticsFromTranspiler(
      String documentText, String documentURI, Transpiler transpiler) {
    logger.log(Level.INFO, "Generating diagnostics.");

    FileInfo fileInfo = FileInfo.newBuilder().setUrl(documentURI).build();

    try {
      // Transpile wstl text
      transpiler.transpile(documentText, fileInfo);
    } catch (TranspilationException transpilationExceptions) {
      for (TranspilationIssue issue : transpilationExceptions.getIssues()) {
        Diagnostic diag = createDiagnosticSourceFromTranspilationIssue(issue);
        diagnosticMessageCollector.addDiagnosticsToDocumentURI(documentURI, diag);
      }
    } catch (RuntimeException e) {
      // Catch, log and add all other exceptions
      logger.log(Level.SEVERE, e.toString());
      TranspilationIssue runtimeIssue = new TranspilationIssue(fileInfo, 1, 1, e.getMessage());
      Diagnostic diag = createDiagnosticSourceFromTranspilationIssue(runtimeIssue);
      diagnosticMessageCollector.addDiagnosticsToDocumentURI(documentURI, diag);
    }
  }

  /**
   * Internal function which is used to generate a {@link Diagnostic} element from an {@link
   * TranspilationIssue}
   *
   * @param issue {@link TranspilationIssue} generated by the {@link Transpiler}.
   * @return a {@link Diagnostic} object.
   */
  private Diagnostic createDiagnosticSourceFromTranspilationIssue(TranspilationIssue issue) {

    // Subtract 1 from line + col number as Jupyter and the LSP spec is 0-indexed and
    // Transpiler is 1-indexed.
    return DiagnosticMessageCollector.createDiagnostic(
        issue.getLine() - 1,
        issue.getCol() - 1,
        issue.getEndLine() - 1,
        issue.getEndCol() - 1,
        issue.getMessage(),
        TRANSPILER_SERVICE_DIAGNOSTICS,
        DiagnosticSeverity.Error);
  }
}
