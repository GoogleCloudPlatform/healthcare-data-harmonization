package utilities

// Description: Extracts a date in FHIR format from a HL7v2 DateTime datatype
//
// Argument(s):
//   str:  HL7v2 DateTime datatype
//
// Output(s):
//   FHIR Date datatype: https://www.hl7.org/fhir/datatypes.html#date
//
def Extract_Date(required str) {
  var input: multiFormatParseTime(str)
  formatDateTime("yyyy-MM-dd", input)
}

// Description: Converts a HL7v2 DateTime datatype to a FHIR Instant datatype
//
// Argument(s):
//   str:  HL7v2 DateTime datatype
//
// Output(s):
//   FHIR Instant datatype: https://www.hl7.org/fhir/datatypes.html#instant
//
def Convert_Instant(required str) {
  var input: multiFormatParseTime(str)
  formatDateTime("yyyy-MM-dd'T'HH:mm:ss.SSSZZ", input)
}

// Description: Converts HL7v2 DateTime to FHIR DateTime format
//
// Argument(s):
//   str:  HL7v2 DateTime datatype
//
// Output(s):
//   FHIR DateTime datatype: https://www.hl7.org/fhir/datatypes.html#dateTime
//
def Convert_DateTime(required str) {
  var input: multiFormatParseTime(str)
  formatDateTime("yyyy-MM-dd'T'HH:mm:ssZZ", input)
}

// This function accepts the datetime format and datetime as arguments and parses the datetime.
def Convert_DateTime(datetime_format, input) {
  var isoTime: parseDateTime(datetime_format, input)
  if !isoTime then {
    var isoTime: formatDateTime("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", input)
  }
  if !isoTime then {
    fail("cannot parse DateTime")
  }
  isoTime
}

// Description: Converts HL7v2 DateTime to FHIR DateTime format
//
// Argument(s):
//   str:  HL7v2 DateTime datatype
//
// Output(s): Unix timestamp as a string: https://www.unixtimestamp.com/
//
def Convert_EpochUnixTimestamp(required str) {
  var input: multiFormatParseTime(str)
  strFmt("%s", floor(getEpochMillis(input) / 1000))
}

// Description: Parses the given timestamp string into ISO format using one of
// the five allowed formats. Returns input timestamp if not in allowed format.
//
// Argument(s):
//   datetime: input string of the timestamp to be parsed
//
// Output(s):
//   string: parsed timestamp in ISO format when input is in one of the
//           supported formats, otherwise returns input timestamp string
def multiFormatParseTime(datetime) {
  // allowed timestamp formats
  var dateTimeWithZoneOffsetFmt: "yyyyMMddHHmmssZ"
  var dateTimeWithFractionalSecondsFmt: "yyyyMMddHHmmss.SSSSSS"
  var dateTimeWithSecondsFmt: "yyyyMMddHHmmss"
  var dateTimeFmt: "yyyyMMddHHmm"
  var dateFmt: "yyyyMMdd"
  // attempt parsing with each of the five allowed formats
  if parseDateTime(dateTimeWithZoneOffsetFmt, datetime)? then {
    parseDateTime(dateTimeWithZoneOffsetFmt, datetime)
  } else if parseDateTime(dateTimeWithFractionalSecondsFmt, datetime)? then {
    parseDateTime(dateTimeWithFractionalSecondsFmt, datetime)
  } else if parseDateTime(dateTimeWithSecondsFmt, datetime)? then {
    parseDateTime(dateTimeWithSecondsFmt, datetime)
  } else if parseDateTime(dateTimeFmt, datetime)? then {
    parseDateTime(dateTimeFmt, datetime)
  } else if parseDateTime(dateFmt, datetime)? then {
    parseDateTime(dateFmt, datetime)
  } else {
    datetime
  }
}

// Description: Add reconciliation timestamp to resource if it doesn't exist
// Argument(s):
//   resource : FHIR resource.
//   timestamp: reconciliation timestamp
//
// Output(s)
//   none
//
def AddReconciliationTimestamp(required Resource, required Timestamp) {
  // Adding ReconciledTimestampExtension to the meta if not already present.
  if !Resource.meta.extension[where $.url == "urn:oid:google/reconciliation-timestamp"] then {
    var Resource.meta.extension[]: Build_ReconciledTimestampExtension(Timestamp)
  }
}

// Description: Constructs a Resource creation timestamp extension to support FHIR reconciliation
//
// Argument(s):
//   Timestamp: https://www.hl7.org/fhir/extensibility.html
//
// Output(s):
//   ReconciledTimestampExtension
//
def Build_ReconciledTimestampExtension(TS) {
  url: "urn:oid:google/reconciliation-timestamp"
  valueInstant: TS
}
