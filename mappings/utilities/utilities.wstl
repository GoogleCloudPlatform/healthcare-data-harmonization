package utilities

import "./dateTimeFns.wstl"
import "./terminologyFns.wstl"

// Description: Matches the given string is a Number or not
//
// Argument(s):
//   str:  input string
//
// Output(s):
//   Boolean: return true when str is a Number; otherwise false
//
def IsNumber(required str) {
  $this: matchesRegex(str, "^\\d*\\.?\\d+$")
}

// Description: Constructs Extension datatype
//
// Argument(s):
//   value: value of the extension
//   valueType: value datatype
//   url: uri for the extension
// Output(s):
//   Extension datatype : http://hl7.org/fhir/R4/extensibility.html#extension
//
def Build_Extension(required value, required valueType, required url) {
  url: url
  if valueType != "extension" and valueType != "Extension" then {
    set("value{valueType}"): value
  } else {
    extension[]: value
  }
}

// Description: Constructs Extension datatype
//
// Argument(s):
//   value: value of the extension
//   url: uri for the extension
//
// Output(s):
//   Extension datatype : http://hl7.org/fhir/R4/extensibility.html#extension
//
def BuildExtension(url, required value) {
  url: url
  extension[]: Build_ValueString(value)
}

// Description: Constructs ValueString datatype
//
// Argument(s):
//   value: value of the ValueString
//
// Output(s):
//   ValueString datatype : https://www.hl7.org/fhir/datatypes.html#string
//
def Build_ValueString(required Value) {
  valueString: Value
  url: "text"
}

// Description: Constructs coding.system attribute
//
// Argument(s):
//   system : coding.system attribute
//
// Output(s):
//   Coding[0].system attribute : https://www.hl7.org/fhir/datatypes.html#uri
//
def Build_System(required System) {
  if !matchesRegex(System, ".*\\s.*") then {
    System
  } else {
    toLower(strJoin("-", split(System, " ")))
  }
}

// Description: If the mapped value is not present then set the default placeholder value
//
// Argument(s):
//   value: FHIR R4 datatype
//   default: FHIR R4 datatype
//
// Output(s):
//   default : FHIR R4 datatype
//
def defaultIfNull(value, required default) if !value then default

// Description: Return list of ignored field values while performing assertEquals
//   between two objects
//
// Argument(s): None

// Output(s):
//   list : fields that would be ignored
def getFieldsToIgnore() [
  "id",
  "url",
  "reference",
  "value"
]

// Description: Assigns id and outputs the resource to the resource array for
// the current mapping stage. IDs may be assigned beforehand if desired.
//
// Argument(s):
//   resource : FHIR resource
//
// Output(s):
//   Returns reference of the resource and putting the actual resource into the root.
//
def OutputResourceAndGetReference(required resource) {
  if !resource.id then {
    var resource.id: hash(resource)
  }
  // The resource array is scoped to a single HL7v2 message and when mapping is
  // complete it will contain all the FHIR resources in the bundle that is
  // executed against the destination FHIR store.
  root Resources[]: resource
  reference: "{resource.resourceType}/{resource.id}"
}

// Description: Constructs a FHIR resource reference
//
// Argument(s):
//   resourceType: FHIR resource type
//   id: FHIR resource id
//
// Output(s):
//   String: FHIR resource reference
//
def ResourceReference(resourceType, id)
  "{resourceType}/{id}"

// Fragment resources are resources referred by incoming resources.
def Build_FragmentResource(required resourceType, required externalId) {
  resourceType: resourceType
  id: externalId
}

// Description: Constructs an Identifier datatype
//
// Argument(s):
//   value: value of the identifier
//   system: system of the identifier
//
// Output(s):
//   Identifier datatype: https://www.hl7.org/fhir/datatypes.html#identifier
//
def BuildIdentifier(required value, system) {
  system: system
  value: value
}
